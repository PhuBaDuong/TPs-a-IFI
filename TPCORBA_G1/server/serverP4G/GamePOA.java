package serverP4G;


/**
* serverP4G/GamePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from P4G.idl
* Thursday, March 10, 2016 4:04:26 PM ICT
*/

public abstract class GamePOA extends org.omg.PortableServer.Servant
 implements serverP4G.GameOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getGameData", new java.lang.Integer (0));
    _methods.put ("getGameId", new java.lang.Integer (1));
    _methods.put ("getPlayers", new java.lang.Integer (2));
    _methods.put ("connectGame", new java.lang.Integer (3));
    _methods.put ("play", new java.lang.Integer (4));
    _methods.put ("quitPlayer", new java.lang.Integer (5));
    _methods.put ("ismyTurn", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // interface d'un jeu
       case 0:  // serverP4G/Game/getGameData
       {
         serverP4G.GameData $result = null;
         $result = this.getGameData ();
         out = $rh.createReply();
         serverP4G.GameDataHelper.write (out, $result);
         break;
       }

       case 1:  // serverP4G/Game/getGameId
       {
         String $result = null;
         $result = this.getGameId ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // serverP4G/Game/getPlayers
       {
         serverP4G.Players $result = null;
         $result = this.getPlayers ();
         out = $rh.createReply();
         serverP4G.PlayersHelper.write (out, $result);
         break;
       }


  // retourner la liste des joueurs connectes
       case 3:  // serverP4G/Game/connectGame
       {
         String player = in.read_string ();
         serverP4G.ReturnCode $result = null;
         $result = this.connectGame (player);
         out = $rh.createReply();
         serverP4G.ReturnCodeHelper.write (out, $result);
         break;
       }


  // demande de participation au jeu
       case 4:  // serverP4G/Game/play
       {
         String player = in.read_string ();
         serverP4G.Column col = serverP4G.ColumnHelper.read (in);
         serverP4G.ReturnCode $result = null;
         $result = this.play (player, col);
         out = $rh.createReply();
         serverP4G.ReturnCodeHelper.write (out, $result);
         break;
       }


  // jetter un jeton
       case 5:  // serverP4G/Game/quitPlayer
       {
         String player = in.read_string ();
         boolean $result = false;
         $result = this.quitPlayer (player);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  // joueur player quitte le jeu
       case 6:  // serverP4G/Game/ismyTurn
       {
         String player = in.read_string ();
         boolean $result = false;
         $result = this.ismyTurn (player);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:serverP4G/Game:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Game _this() 
  {
    return GameHelper.narrow(
    super._this_object());
  }

  public Game _this(org.omg.CORBA.ORB orb) 
  {
    return GameHelper.narrow(
    super._this_object(orb));
  }


} // class GamePOA
