// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "P4G.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



void
serverP4G::GameData::operator>>= (cdrStream &_n) const
{
  state >>= _n;
  {
    _n.declareArrayLength(omni::ALIGN_1, 42);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 42; _0i0++){
      _n.marshalChar(matrix[_0i0]);
    }
  }

}

void
serverP4G::GameData::operator<<= (cdrStream &_n)
{
  (GameState&)state <<= _n;
  {
    for (_CORBA_ULong _0i0 = 0; _0i0 < 42; _0i0++){
      matrix[_0i0] = _n.unmarshalChar();
    }
  }

}

void
serverP4G::Players::operator>>= (cdrStream &_n) const
{
  _n.marshalString(player1,0);
  _n.marshalString(player2,0);

}

void
serverP4G::Players::operator<<= (cdrStream &_n)
{
  player1 = _n.unmarshalString(0);
  player2 = _n.unmarshalString(0);

}

serverP4G::Game_ptr serverP4G::Game_Helper::_nil() {
  return ::serverP4G::Game::_nil();
}

::CORBA::Boolean serverP4G::Game_Helper::is_nil(::serverP4G::Game_ptr p) {
  return ::CORBA::is_nil(p);

}

void serverP4G::Game_Helper::release(::serverP4G::Game_ptr p) {
  ::CORBA::release(p);
}

void serverP4G::Game_Helper::marshalObjRef(::serverP4G::Game_ptr obj, cdrStream& s) {
  ::serverP4G::Game::_marshalObjRef(obj, s);
}

serverP4G::Game_ptr serverP4G::Game_Helper::unmarshalObjRef(cdrStream& s) {
  return ::serverP4G::Game::_unmarshalObjRef(s);
}

void serverP4G::Game_Helper::duplicate(::serverP4G::Game_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

serverP4G::Game_ptr
serverP4G::Game::_duplicate(::serverP4G::Game_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

serverP4G::Game_ptr
serverP4G::Game::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


serverP4G::Game_ptr
serverP4G::Game::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

serverP4G::Game_ptr
serverP4G::Game::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Game _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Game* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_Game;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* serverP4G::Game::_PD_repoId = "IDL:serverP4G/Game:1.0";


serverP4G::_objref_Game::~_objref_Game() {
  
}


serverP4G::_objref_Game::_objref_Game(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::serverP4G::Game::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
serverP4G::_objref_Game::_ptrToObjRef(const char* id)
{
  if (id == ::serverP4G::Game::_PD_repoId)
    return (::serverP4G::Game_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::serverP4G::Game::_PD_repoId))
    return (::serverP4G::Game_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for serverP4G::Game::getGameData

// Proxy call descriptor class. Mangled signature:
//  _cserverP4G_mGameData
class _0RL_cd_212313b7a6b86efb_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_212313b7a6b86efb_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  serverP4G::GameData result;
};

void _0RL_cd_212313b7a6b86efb_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const serverP4G::GameData&) result >>= _n;

}

void _0RL_cd_212313b7a6b86efb_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (serverP4G::GameData&)result <<= _n;

}

const char* const _0RL_cd_212313b7a6b86efb_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_00000000* tcd = (_0RL_cd_212313b7a6b86efb_00000000*)cd;
  serverP4G::_impl_Game* impl = (serverP4G::_impl_Game*) svnt->_ptrToInterface(serverP4G::Game::_PD_repoId);
  tcd->result = impl->getGameData();


}

serverP4G::GameData serverP4G::_objref_Game::getGameData()
{
  _0RL_cd_212313b7a6b86efb_00000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_10000000, "getGameData", 12);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for serverP4G::Game::getGameId

// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_212313b7a6b86efb_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_212313b7a6b86efb_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var result;
};

void _0RL_cd_212313b7a6b86efb_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_212313b7a6b86efb_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_212313b7a6b86efb_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_20000000* tcd = (_0RL_cd_212313b7a6b86efb_20000000*)cd;
  serverP4G::_impl_Game* impl = (serverP4G::_impl_Game*) svnt->_ptrToInterface(serverP4G::Game::_PD_repoId);
  tcd->result = impl->getGameId();


}

char* serverP4G::_objref_Game::getGameId()
{
  _0RL_cd_212313b7a6b86efb_20000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_30000000, "getGameId", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for serverP4G::Game::getPlayers

// Proxy call descriptor class. Mangled signature:
//  _cserverP4G_mPlayers
class _0RL_cd_212313b7a6b86efb_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_212313b7a6b86efb_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  serverP4G::Players_var result;
};

void _0RL_cd_212313b7a6b86efb_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const serverP4G::Players&) result >>= _n;

}

void _0RL_cd_212313b7a6b86efb_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new serverP4G::Players;
  (serverP4G::Players&)result <<= _n;

}

const char* const _0RL_cd_212313b7a6b86efb_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_40000000* tcd = (_0RL_cd_212313b7a6b86efb_40000000*)cd;
  serverP4G::_impl_Game* impl = (serverP4G::_impl_Game*) svnt->_ptrToInterface(serverP4G::Game::_PD_repoId);
  tcd->result = impl->getPlayers();


}

serverP4G::Players* serverP4G::_objref_Game::getPlayers()
{
  _0RL_cd_212313b7a6b86efb_40000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_50000000, "getPlayers", 11);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for serverP4G::Game::connectGame

// Proxy call descriptor class. Mangled signature:
//  _cserverP4G_mReturnCode_i_cstring
class _0RL_cd_212313b7a6b86efb_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_212313b7a6b86efb_60000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  serverP4G::ReturnCode result;
};

void _0RL_cd_212313b7a6b86efb_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_212313b7a6b86efb_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_212313b7a6b86efb_60000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_212313b7a6b86efb_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  (serverP4G::ReturnCode&)result <<= _n;

}

const char* const _0RL_cd_212313b7a6b86efb_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_60000000* tcd = (_0RL_cd_212313b7a6b86efb_60000000*)cd;
  serverP4G::_impl_Game* impl = (serverP4G::_impl_Game*) svnt->_ptrToInterface(serverP4G::Game::_PD_repoId);
  tcd->result = impl->connectGame(tcd->arg_0);


}

serverP4G::ReturnCode serverP4G::_objref_Game::connectGame(const char* player)
{
  _0RL_cd_212313b7a6b86efb_60000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_70000000, "connectGame", 12);
  _call_desc.arg_0 = player;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for serverP4G::Game::play

// Proxy call descriptor class. Mangled signature:
//  _cserverP4G_mReturnCode_i_cstring_i_cserverP4G_mColumn
class _0RL_cd_212313b7a6b86efb_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_212313b7a6b86efb_80000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  serverP4G::Column arg_1;
  serverP4G::ReturnCode result;
};

void _0RL_cd_212313b7a6b86efb_80000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_212313b7a6b86efb_80000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (serverP4G::Column&)arg_1 <<= _n;

}

void _0RL_cd_212313b7a6b86efb_80000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_212313b7a6b86efb_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  (serverP4G::ReturnCode&)result <<= _n;

}

const char* const _0RL_cd_212313b7a6b86efb_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_80000000* tcd = (_0RL_cd_212313b7a6b86efb_80000000*)cd;
  serverP4G::_impl_Game* impl = (serverP4G::_impl_Game*) svnt->_ptrToInterface(serverP4G::Game::_PD_repoId);
  tcd->result = impl->play(tcd->arg_0, tcd->arg_1);


}

serverP4G::ReturnCode serverP4G::_objref_Game::play(const char* player, ::serverP4G::Column col)
{
  _0RL_cd_212313b7a6b86efb_80000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_90000000, "play", 5);
  _call_desc.arg_0 = player;
  _call_desc.arg_1 = col;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for serverP4G::Game::quitPlayer

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_212313b7a6b86efb_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_212313b7a6b86efb_a0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_212313b7a6b86efb_a0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_212313b7a6b86efb_a0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_212313b7a6b86efb_a0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_212313b7a6b86efb_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_212313b7a6b86efb_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_a0000000* tcd = (_0RL_cd_212313b7a6b86efb_a0000000*)cd;
  serverP4G::_impl_Game* impl = (serverP4G::_impl_Game*) svnt->_ptrToInterface(serverP4G::Game::_PD_repoId);
  tcd->result = impl->quitPlayer(tcd->arg_0);


}

::CORBA::Boolean serverP4G::_objref_Game::quitPlayer(const char* player)
{
  _0RL_cd_212313b7a6b86efb_a0000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_b0000000, "quitPlayer", 11);
  _call_desc.arg_0 = player;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for serverP4G::Game::ismyTurn

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_a0000000* tcd = (_0RL_cd_212313b7a6b86efb_a0000000*)cd;
  serverP4G::_impl_Game* impl = (serverP4G::_impl_Game*) svnt->_ptrToInterface(serverP4G::Game::_PD_repoId);
  tcd->result = impl->ismyTurn(tcd->arg_0);


}

::CORBA::Boolean serverP4G::_objref_Game::ismyTurn(const char* player)
{
  _0RL_cd_212313b7a6b86efb_a0000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_c0000000, "ismyTurn", 9);
  _call_desc.arg_0 = player;

  _invoke(_call_desc);
  return _call_desc.result;


}

serverP4G::_pof_Game::~_pof_Game() {}


omniObjRef*
serverP4G::_pof_Game::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::serverP4G::_objref_Game(ior, id);
}


::CORBA::Boolean
serverP4G::_pof_Game::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::serverP4G::Game::_PD_repoId))
    return 1;
  
  return 0;
}

const serverP4G::_pof_Game _the_pof_serverP4G_mGame;

serverP4G::_impl_Game::~_impl_Game() {}


::CORBA::Boolean
serverP4G::_impl_Game::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "getGameData")) {

    _0RL_cd_212313b7a6b86efb_00000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_10000000, "getGameData", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getGameId")) {

    _0RL_cd_212313b7a6b86efb_20000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_30000000, "getGameId", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getPlayers")) {

    _0RL_cd_212313b7a6b86efb_40000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_50000000, "getPlayers", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "connectGame")) {

    _0RL_cd_212313b7a6b86efb_60000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_70000000, "connectGame", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "play")) {

    _0RL_cd_212313b7a6b86efb_80000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_90000000, "play", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "quitPlayer")) {

    _0RL_cd_212313b7a6b86efb_a0000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_b0000000, "quitPlayer", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "ismyTurn")) {

    _0RL_cd_212313b7a6b86efb_a0000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_c0000000, "ismyTurn", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
serverP4G::_impl_Game::_ptrToInterface(const char* id)
{
  if (id == ::serverP4G::Game::_PD_repoId)
    return (::serverP4G::_impl_Game*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::serverP4G::Game::_PD_repoId))
    return (::serverP4G::_impl_Game*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
serverP4G::_impl_Game::_mostDerivedRepoId()
{
  return ::serverP4G::Game::_PD_repoId;
}

serverP4G::GameServer_ptr serverP4G::GameServer_Helper::_nil() {
  return ::serverP4G::GameServer::_nil();
}

::CORBA::Boolean serverP4G::GameServer_Helper::is_nil(::serverP4G::GameServer_ptr p) {
  return ::CORBA::is_nil(p);

}

void serverP4G::GameServer_Helper::release(::serverP4G::GameServer_ptr p) {
  ::CORBA::release(p);
}

void serverP4G::GameServer_Helper::marshalObjRef(::serverP4G::GameServer_ptr obj, cdrStream& s) {
  ::serverP4G::GameServer::_marshalObjRef(obj, s);
}

serverP4G::GameServer_ptr serverP4G::GameServer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::serverP4G::GameServer::_unmarshalObjRef(s);
}

void serverP4G::GameServer_Helper::duplicate(::serverP4G::GameServer_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

serverP4G::GameServer_ptr
serverP4G::GameServer::_duplicate(::serverP4G::GameServer_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

serverP4G::GameServer_ptr
serverP4G::GameServer::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


serverP4G::GameServer_ptr
serverP4G::GameServer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

serverP4G::GameServer_ptr
serverP4G::GameServer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_GameServer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_GameServer* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_GameServer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* serverP4G::GameServer::_PD_repoId = "IDL:serverP4G/GameServer:1.0";


serverP4G::_objref_GameServer::~_objref_GameServer() {
  
}


serverP4G::_objref_GameServer::_objref_GameServer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::serverP4G::GameServer::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
serverP4G::_objref_GameServer::_ptrToObjRef(const char* id)
{
  if (id == ::serverP4G::GameServer::_PD_repoId)
    return (::serverP4G::GameServer_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::serverP4G::GameServer::_PD_repoId))
    return (::serverP4G::GameServer_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for serverP4G::GameServer::listAllGames

// Proxy call descriptor class. Mangled signature:
//  _cserverP4G_mListGames
class _0RL_cd_212313b7a6b86efb_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_212313b7a6b86efb_d0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  serverP4G::ListGames_var result;
};

void _0RL_cd_212313b7a6b86efb_d0000000::marshalReturnedValues(cdrStream& _n)
{
  (const serverP4G::ListGames&) result >>= _n;

}

void _0RL_cd_212313b7a6b86efb_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new serverP4G::ListGames;
  (serverP4G::ListGames&)result <<= _n;

}

const char* const _0RL_cd_212313b7a6b86efb_d0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_d0000000* tcd = (_0RL_cd_212313b7a6b86efb_d0000000*)cd;
  serverP4G::_impl_GameServer* impl = (serverP4G::_impl_GameServer*) svnt->_ptrToInterface(serverP4G::GameServer::_PD_repoId);
  tcd->result = impl->listAllGames();


}

serverP4G::ListGames* serverP4G::_objref_GameServer::listAllGames()
{
  _0RL_cd_212313b7a6b86efb_d0000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_e0000000, "listAllGames", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for serverP4G::GameServer::listOpenGames

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_d0000000* tcd = (_0RL_cd_212313b7a6b86efb_d0000000*)cd;
  serverP4G::_impl_GameServer* impl = (serverP4G::_impl_GameServer*) svnt->_ptrToInterface(serverP4G::GameServer::_PD_repoId);
  tcd->result = impl->listOpenGames();


}

serverP4G::ListGames* serverP4G::_objref_GameServer::listOpenGames()
{
  _0RL_cd_212313b7a6b86efb_d0000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_f0000000, "listOpenGames", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for serverP4G::GameServer::getGame

// Proxy call descriptor class. Mangled signature:
//  _cserverP4G_mGame_i_cstring
class _0RL_cd_212313b7a6b86efb_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_212313b7a6b86efb_01000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  serverP4G::Game_var result;
};

void _0RL_cd_212313b7a6b86efb_01000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_212313b7a6b86efb_01000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_212313b7a6b86efb_01000000::marshalReturnedValues(cdrStream& _n)
{
  serverP4G::Game::_marshalObjRef(result,_n);

}

void _0RL_cd_212313b7a6b86efb_01000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = serverP4G::Game::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_212313b7a6b86efb_01000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_01000000* tcd = (_0RL_cd_212313b7a6b86efb_01000000*)cd;
  serverP4G::_impl_GameServer* impl = (serverP4G::_impl_GameServer*) svnt->_ptrToInterface(serverP4G::GameServer::_PD_repoId);
  tcd->result = impl->getGame(tcd->arg_0);


}

serverP4G::Game_ptr serverP4G::_objref_GameServer::getGame(const char* id)
{
  _0RL_cd_212313b7a6b86efb_01000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_11000000, "getGame", 8);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for serverP4G::GameServer::createGame

// Local call call-back function.
static void
_0RL_lcfn_212313b7a6b86efb_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_212313b7a6b86efb_01000000* tcd = (_0RL_cd_212313b7a6b86efb_01000000*)cd;
  serverP4G::_impl_GameServer* impl = (serverP4G::_impl_GameServer*) svnt->_ptrToInterface(serverP4G::GameServer::_PD_repoId);
  tcd->result = impl->createGame(tcd->arg_0);


}

serverP4G::Game_ptr serverP4G::_objref_GameServer::createGame(const char* player)
{
  _0RL_cd_212313b7a6b86efb_01000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_21000000, "createGame", 11);
  _call_desc.arg_0 = player;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}

serverP4G::_pof_GameServer::~_pof_GameServer() {}


omniObjRef*
serverP4G::_pof_GameServer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::serverP4G::_objref_GameServer(ior, id);
}


::CORBA::Boolean
serverP4G::_pof_GameServer::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::serverP4G::GameServer::_PD_repoId))
    return 1;
  
  return 0;
}

const serverP4G::_pof_GameServer _the_pof_serverP4G_mGameServer;

serverP4G::_impl_GameServer::~_impl_GameServer() {}


::CORBA::Boolean
serverP4G::_impl_GameServer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "listAllGames")) {

    _0RL_cd_212313b7a6b86efb_d0000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_e0000000, "listAllGames", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "listOpenGames")) {

    _0RL_cd_212313b7a6b86efb_d0000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_f0000000, "listOpenGames", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getGame")) {

    _0RL_cd_212313b7a6b86efb_01000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_11000000, "getGame", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "createGame")) {

    _0RL_cd_212313b7a6b86efb_01000000 _call_desc(_0RL_lcfn_212313b7a6b86efb_21000000, "createGame", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
serverP4G::_impl_GameServer::_ptrToInterface(const char* id)
{
  if (id == ::serverP4G::GameServer::_PD_repoId)
    return (::serverP4G::_impl_GameServer*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::serverP4G::GameServer::_PD_repoId))
    return (::serverP4G::_impl_GameServer*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
serverP4G::_impl_GameServer::_mostDerivedRepoId()
{
  return ::serverP4G::GameServer::_PD_repoId;
}

POA_serverP4G::Game::~Game() {}

POA_serverP4G::GameServer::~GameServer() {}

